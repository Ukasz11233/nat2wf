system: test
user: Give me 30 examples like this but with different input and output according to the input. Name then accordingly Input1... Output1..., Input2... Output2... . Input: Keep searching a list until an item with the highest value is found. Remove the item. Output: A[Start] --> B[Search the list] B --> C{Item with the highest value found?} C -- No --> B C -- Yes --> D[Remove the item] D --> E[End]. Remember to create various length graphs
assistant: Input1: Check if a number is prime. Output1: A[Start] --> B[Check if number is divisible by any number less than itself] B --> C{Number is divisible?} C -- Yes --> D[Not prime] D --> E[End]
Input2: Calculate the factorial of a number. Output2: A[Start] --> B[Check if number is zero] B -- No --> C[Calculate factorial] C --> D[Decrease the number by one] D --> E[End]
Input3: Sort a list of numbers in ascending order. Output3: A[Start] --> B[Select the minimum number from the list] B --> C[Moved it to the sorted list] C --> D{All numbers sorted?} D -- No --> B D -- Yes --> E[End]
Input4: Find the maximum element in an array. Output4: A[Start] --> B[Select the first element as maximum] B --> C[Compare each element with the maximum] C --> D{Current element greater than maximum?} D -- Yes --> E[Update maximum] E --> C D -- No --> F[Maximum found] F --> G[End]
Input5: Convert a decimal number to binary. Output5: A[Start] --> B[Divide the decimal number by 2] B --> C[Check remainder] C --> D{Quotient is not zero?} D -- Yes --> E[Save remainder] E --> B D -- No --> F[Reverse the remainders] F --> G[End]
Input6: Find the length of a string. Output6: A[Start] --> B[Set count to zero] B --> C[Increase count by one] C --> D{End of the string?} D -- No --> E[Move to next character] E --> C D -- Yes --> F[Count found] F --> G[End]
Input7: Convert a sorted list to a binary search tree. Output7: A[Start] --> B[Check if list is empty] B -- Yes --> C[Empty tree] C --> D[End] B -- No --> E[Select middle element] E --> F[Create a node] E --> G[Split the remaining list into left and right] G --> H[Create subtrees for left and right] H --> F I[End]
Input8: Determine if two strings are anagrams. Output8: A[Start] --> B[Sort the characters in the first string] B --> C[Sort the characters in the second string] C --> D{Sorted strings are equal?} D -- Yes --> E[Anagrams] E --> F[End] D -- No --> G[Not anagrams] G --> F
Input9: Reverse the elements of an array. Output9: A[Start] --> B[Initialize start and end indices] B --> C[Swap elements at start and end indices] C --> D[Move start index forward] D --> E[Move end index backward] E --> C D -- No --> F[Array reversed] F --> G[End]
Input10: Check if a string is a palindrome. Output10: A[Start] --> B[Set start and end indices] B --> C{Characters at start and end indices are equal?} C -- Yes --> D[Move start index forward] D --> E[Move end index backward] E --> B C -- No --> F[Not a palindrome] F --> G[End]
Input11: Calculate the sum of digits in a number. Output11: A[Start] --> B[Extract the last digit] B --> C[Add it to the sum] C --> D[Remove the last digit] D --> E{All digits extracted?} E -- Yes --> F[Sum of digits found] F --> G[End] E -- No --> B
Input12: Find the longest common subsequence between two strings. Output12: A[Start] --> B[Check if strings are empty] B -- Yes --> C[Empty subsequence] C --> D[End] B -- No --> E{Characters at current indices are equal?} E -- Yes --> F[Include current character] F --> G[Move to next indices] G --> E E -- No --> H{Longest subsequence between adjacent characters} H -- Yes --> F H -- No --> I[Exclude current character] I --> J[Move to next indices] J --> E
Input13: Evaluate an arithmetic expression. Output13: A[Start] --> B[Check if next token is a number] B -- Yes --> C[Push it onto stack] C --> D[Check if next token is an operator] D -- Yes --> E[Pop two numbers from stack] E --> F[Perform the operation] F --> G[Push the result onto stack] G --> D D -- No --> H[End] B -- No --> H
Input14: Convert a list of integers to a comma-separated string. Output14: A[Start] --> B[Check if list is empty] B -- Yes --> C[Empty string] C --> D[End] B -- No --> E[Convert first integer to string] E --> F[Append it to the string] F --> G[Append comma] G --> H[Move to next integer] H --> E
Input15: Count the number of occurrences of a character in a string. Output15: A[Start] --> B[Set count to zero] B --> C{Character found at current index is equal to target?} C -- Yes --> D[Increase count by one] D --> E[Move to next index] E --> C C -- No --> F[Count found] F --> G[End]
Input16: Determine if a binary tree is balanced. Output16: A[Start] --> B{Tree is empty?} B -- Yes --> C[Empty tree] C --> G[End] B -- No --> D[Calculate the height of left subtree] D --> E[Calculate the height of right subtree] E --> F{Difference in heights is less than or equal to 1?} F -- Yes --> G[Tree is balanced] G --> H[End] F -- No --> I[Tree is not balanced] I --> H
Input17: Find the mode (most frequent element) in a list. Output17: A[Start] --> B[Count occurrences of each element] B --> C[Find the maximum count] C --> D[Find elements with maximum count] D --> E[Mode found] E --> F[End]
Input18: Determine if a number is a perfect square. Output18: A[Start] --> B[Calculate the square root of the number] B --> C{Square root is an integer?} C -- Yes --> D[Perfect square] D --> E[End] C -- No --> F[Not a perfect square] F --> E
Input19: Reverse the words in a sentence. Output19: A[Start] --> B[Split sentence into words] B --> C[Reverse the order of the words] C --> D[Join the reversed words] D --> E[Sentence with reversed words] E --> F[End]
Input20: Find the median of a list of numbers. Output20: A[Start] --> B[Sort the list in ascending order] B --> C{List has odd number of elements?} C -- Yes --> D[Median is the middle element] D --> F[End] C -- No --> E[Median is the average of the middle two elements] E --> F
Input21: Determine if a number is a power of two. Output21: A[Start] --> B{Number is equal to one?} B -- Yes --> D[Power of two] D --> F[End] B -- No --> C{Number is divisible by two?} C -- Yes --> C[Divide the number by two] C --> B C -- No --> E[Not a power of two] E --> F
Input22: Find the GCD (Greatest Common Divisor) of two numbers. Output22: A[Start] --> B{Number b is equal to zero?} B -- Yes --> D[GCD is a] D --> F[End] B -- No --> C[Calculate the remainder of a divided by b] C --> E[Swap a and b] E --> B
Input23: Calculate the average of a list of numbers. Output23: A[Start] --> B[Calculate the sum of numbers] B --> C[Divide the sum by the number of elements] C --> D[Average found] D --> E[End]
Input24: Determine if a number is a prime palindrome. Output24: A[Start] --> B{Number is equal to one?} B -- Yes --> G[End] B -- No --> C{Number is prime?} C -- No --> G[End] C -- Yes --> D[Convert number to string] D --> E{String is a palindrome?} E -- Yes --> F[Prime palindrome] F --> G[End] E -- No --> G[End]
Input25: Calculate the Fibonacci sequence up to a given number of terms. Output25: A[Start] --> B{Number of terms is less than or equal to one?} B -- Yes --> C[Return first term] C --> G[End] B -- No --> D[Initialize first and second terms] D --> E[Print first term] E --> F[Swap first and second terms] F --> H[Calculate next term] H --> E
Input26: Determine if a string is a valid email address. Output26: A[Start] --> B{String matches email address pattern?} B -- Yes --> C[Valid email address] C --> D[End] B -- No --> E[Invalid email address] E --> D
Input27: Remove duplicates from a list. Output27: A[Start] --> B[Initialize an empty set] B --> C[Append each element to the set] C --> D[Create a list from the set] D --> E[Duplicates removed] E --> F[End]
Input28: Determine if a number is a perfect number. Output28: A[Start] --> B{Number is equal to one?} B -- Yes --> C[Not a perfect number] C --> I[End] B -- No --> D[Find proper divisors of the number] D --> E[Calculate the sum of proper divisors] E --> F{Sum of proper divisors is equal to the number?} F -- Yes --> G[Perfect number] G --> I[End] F -- No --> C
Input29: Convert a decimal number to Roman numerals. Output29: A[Start] --> B[Find the largest Roman numeral less than or equal to the number] B --> C[Subtract the value of the Roman numeral from the number] C --> D{Number is equal to zero?} D -- Yes --> E[Roman numeral found] E --> F[End] D -- No --> B
Input30: Find the volume of a sphere. Output30: A[Start] --> B[Enter the radius] B --> C[Calculate the cube of the radius] C --> D[Multiply by 4/3] D --> E[Multiply by pi] E --> F[Volume found] F --> G[End]
