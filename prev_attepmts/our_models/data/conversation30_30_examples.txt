system: test
user: Give me 30 examples like this but with different input and output according to the input. Name then accordingly Input1... Output1..., Input2... Output2... . Input: Keep searching a list until an item with the highest value is found. Remove the item. Output: A[Start] --> B[Search the list] B --> C{Item with the highest value found?} C -- No --> B C -- Yes --> D[Remove the item] D --> E[End]. Remember to create various length graphs
assistant: Input1: Find the shortest path in a graph. Output1: A[Start] --> B[Search for the shortest path] B --> C{Shortest path found?} C -- No --> B C -- Yes --> D[End]
Input2: Sort a given list of numbers in ascending order. Output2: A[Start] --> B[Check if the list is sorted] B -- No --> C[Sort the list] C --> D[Check if the list is sorted] D -- No --> C D -- Yes --> E[End]
Input3: Calculate the sum of all elements in an array. Output3: A[Start] --> B[Initialize sum as 0] B --> C{All elements processed?} C -- No --> D[Add current element to sum] D --> E[Move to next element] E --> C E -- Yes --> F[End]
Input4: Find the median value in a set of numbers. Output4: A[Start] --> B[Sort the numbers in ascending order] B --> C{Odd number of elements?} C -- No --> D[Find middle two numbers] D --> E[Calculate average of middle two numbers] E --> F[End]
Input5: Convert a decimal number to binary representation. Output5: A[Start] --> B[Initialize an empty binary string] B --> C{Decimal number > 0?} C -- No --> D[End] C -- Yes --> E[Calculate remainder] E --> F[Update binary string] F --> G[Divide decimal number by 2] G --> C
Input6: Determine if a given string is a palindrome. Output6: A[Start] --> B[Initialize start and end pointers] B --> C{Characters at start and end match?} C -- No --> D[Not a palindrome] D --> E[Move start pointer forward] E --> F[Move end pointer backward] F --> C F -- Yes --> G[Palindrome] G --> H[End]
Input7: Multiply two matrices. Output7: A[Start] --> B[Check if the matrices can be multiplied] B -- No --> C[End] B -- Yes --> D[Initialize resulting matrix] D --> E[Loop through rows of the first matrix] E --> F[Loop through columns of the second matrix] F --> G[Calculate dot product] G --> H[Assign value to resulting matrix] H --> F E -- No --> C
Input8: Find the factorial of a given number. Output8: A[Start] --> B[Initialize factorial as 1] B --> C{Number > 0?} C -- Yes --> D[Multiply factorial by number] D --> E[Decrement number] E --> C E -- No --> F[End]
Input9: Reverse a given string. Output9: A[Start] --> B[Initialize an empty reversed string] B --> C{End of input string reached?} C -- No --> D[Append current character to reversed string] D --> E[Move to next character] E --> C C -- Yes --> F[End]
Input10: Find the largest prime number within a given range. Output10: A[Start] --> B[Initialize largestPrime as 0] B --> C[Loop through numbers in the given range] C --> D{Current number is prime?} D -- No --> C D -- Yes --> E{Current number > largestPrime?} E -- No --> C E -- Yes --> F[Update largestPrime] F --> G[End]
Input11: Calculate the area of a triangle given the lengths of its sides. Output11: A[Start] --> B[Calculate semi-perimeter] B --> C[Calculate area using Heron's formula] C --> D[End]
Input12: Convert a temperature from Celsius to Fahrenheit. Output12: A[Start] --> B[Calculate Fahrenheit] B --> C[End]
Input13: Check if a given number is a prime number. Output13: A[Start] --> B{Number <= 1?} B -- Yes --> C[Not a prime number] C --> D{Number is divisible by any number from 2 to sqrt(Number)?} D -- Yes --> C D -- No --> E[Prime number] E --> F[End]
Input14: Determine if a given year is a leap year. Output14: A[Start] --> B{Year divisible by 4?} B -- No --> C[Not a leap year] C --> D{Year divisible by 100?} D -- No --> E[Leap year] E --> F[End] D -- Yes --> G{Year divisible by 400?} G -- No --> C G -- Yes --> E
Input15: Find the maximum element in an array. Output15: A[Start] --> B[Initialize max as first element] B --> C{All elements processed?} C -- No --> D{Current element > max?} D -- No --> E[Move to next element] E --> C D -- Yes --> F[Update max] F --> E C -- Yes --> G[End]
Input16: Check if a given string is an anagram of another string. Output16: A[Start] --> B[Sort both strings] B --> C{Sorted strings are equal?} C -- No --> D[Not an anagram] D --> E[Anagram] E --> F[End]
Input17: Find the GCD (Greatest Common Divisor) of two numbers. Output17: A[Start] --> B{Number1 > Number2?} B -- No --> C[Swap Number1 and Number2] C --> D{Number2 == 0?} D -- Yes --> E[Number1 is GCD] E --> F[End] D -- No --> G{Calculate remainder} G --> H[Assign Number2 to Number1] H --> G
Input18: Convert a binary number to decimal representation. Output18: A[Start] --> B[Calculate decimal number] B --> C[End]
Input19: Determine if a given string is a palindrome ignoring spaces and punctuation. Output19: A[Start] --> B[Remove spaces and punctuation from string] B --> C{String is palindrome?} C -- No --> D[Not a palindrome] D --> E[Palindrome] E --> F[End]
Input20: Calculate the sum of all even numbers in a given array. Output20: A[Start] --> B[Initialize sum as 0] B --> C{All elements processed?} C -- No --> D{Current element is even?} D -- No --> E[Move to next element] E --> C D -- Yes --> F[Add current element to sum] F --> E C -- Yes --> G[End]
Input21: Find the perimeter of a rectangle given its length and width. Output21: A[Start] --> B[Calculate perimeter] B --> C[End]
Input22: Determine if a given year is a leap year, considering the Gregorian calendar. Output22: A[Start] --> B{Year divisible by 4?} B -- No --> C[Not a leap year] C --> D{Year divisible by 100?} D -- No --> E[Leap year] E --> F[End] D -- Yes --> G{Year divisible by 400?} G -- No --> C G -- Yes --> E
Input23: Calculate the average of a given array of numbers. Output23: A[Start] --> B[Initialize sum as 0 and count as 0] B --> C{All elements processed?} C -- No --> D[Add current element to sum] D --> E[Increment count] E --> F[Move to next element] F --> C C -- Yes --> G[Calculate average] G --> H[End]
Input24: Find the number of vowels in a given string. Output24: A[Start] --> B[Initialize count as 0] B --> C{End of string reached?} C -- No --> D{Current character is a vowel?} D -- No --> E[Move to next character] E --> C D -- Yes --> F[Increment count] F --> E C -- Yes --> G[End]
Input25: Determine if a given string is a palindrome, considering only alphanumeric characters. Output25: A[Start] --> B[Remove non-alphanumeric characters from string] B --> C{String is palindrome?} C -- No --> D[Not a palindrome] D --> E[Palindrome] E --> F[End]
Input26: Encrypt a given string using a Caesar cipher with a given shift. Output26: A[Start] --> B[Initialize an empty encrypted string] B --> C{End of string reached?} C -- No --> D[Shift current character] D --> E[Add shifted character to encrypted string] E --> F[Move to next character] F --> C C -- Yes --> G[End]
Input27: Check if a given number is a perfect square. Output27: A[Start] --> B{Number <= 0?} B -- Yes --> C[Not a perfect square] C --> D{Square root of Number is an integer?} D -- Yes --> E[Perfect square] E --> F[End] D -- No --> C
Input28: Find the longest word in a given sentence. Output28: A[Start] --> B[Split sentence into words] B --> C[Initialize longestWord as empty string] C --> D{All words processed?} D -- No --> E{Current word has more characters than longestWord?} E -- No --> F[Move to next word] F --> D E -- Yes --> G[Update longestWord] G --> F D -- Yes --> H[End]
Input29: Calculate the volume of a sphere given its radius. Output29: A[Start] --> B[Calculate volume] B --> C[End]
Input30: Determine if a given string is a pangram (contains every letter of the alphabet). Output30: A[Start] --> B[Remove spaces and punctuation from string] B --> C{All letters of the alphabet present?} C -- No --> D[Not a pangram] D --> E[Pangram] E --> F[End]
